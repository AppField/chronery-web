language: node_js
node_js:
 - "node"
python:
   - "3.5"
cache:
  directories:
    - "node_modules"
# This is needed to avoid building all the tags pushed by travis
branches:
  except:
    - /^v?\d+\.\d+\.\d+$/
before_install:
#    Create a git tag of the new version.
#    If package.json major and minor version match last tag, increment last tag. Else use package.json major.minor.0.
    - "{ sed -nE 's/^[ \\t]*\"version\": \"([0-9]{1,}\\.[0-9]{1,}\\.)[0-9x]{1,}\",$/\\1/p' package.json; git describe --abbrev=0 | sed -E 's/^v([0-9]{1,}\\.[0-9]{1,}\\.)([0-9]{1,})$/\\1 \\2/g'; } | tr \"\\n\" \" \" | awk '{printf($1==$2?\"v\"$2$3+1:\"v\"$1\"0\")}' | xargs -I {} git tag -a {} -m \"{}\"\n"
#    Update package.json base on the git tag just created
    - npm --no-git-tag-version version from-git
install:
  # `awscli` is required for invalidation of CloudFront distributions.
  - pip install --user awscli
  - npm install
script:
  # Build your site (e.g., HTML, CSS, JS) here.
  - npm run build-de
deploy:
  - provider: s3
    on:
      branch: master
    access_key_id: $AWS_ACCESS_KEY_ID
    secret_access_key: $AWS_SECRET_ACCESS_KEY
    bucket: chronery-web
    skip_cleanup: true
    local_dir: dist
#  - provider: script
#      skip_cleanup: true
#      script: git push --tags
#      on:
#        branch: master
after_deploy:
  # Allow `awscli` to make requests to CloudFront.
  - aws configure set preview.cloudfront true
  # Invalidate every object in the targeted distribution.
  - aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
